density exponential = function(lambda, n, a) {
density_exponential = function(lambda, n, a) {
x = seq(0, a, n);
y = dexp(x, lambda);
plot(x, y, type = ’l’);
density_exponential = function(lambda, n, a) {
x = seq(0, a, n);
y = dexp(x, lambda);
plot(x, y, type = 'l');
}
density_exponential
density_exponential
density_exponential(1,100,10)
density_exponential(1,2,10)
density_exponential(1,100,10)
density_exponential(1,2,10)
density_exponential(2.0,1,10)
density_gama(1,1/2,0.1,10)
density_gama = function(alpha,lambda, n, a) {
x = seq(0, a, n);
y = dexp(x, lambda);
plot(x, y, type = 'l');
}
density_gama(1,1/2,0.1,10)
density_gama = function(alpha,lambda, n, a) {
x = seq(0, a, n);
y = dexp(x, rate=lambda);
plot(x, y, type = 'l');
}
density_gama = function(alpha,lambda, n, a) {
x = seq(0, a, n);
y = dexp(x, alpha, rate=lambda);
plot(x, y, type = 'l');
}
density_gama(1,1/2,0.1,10)
density_gama = function(alpha,lambda, n, a) {
x = seq(0, a, n);
y = dexp(x, alpha, rate=lambda);
plot(x, y, type = 'l');
}
density_student = function(r, n, a) {
x = seq(0, a, n);
y = dt(x, r);
plot(x, y, type = 'l');
}
density_student(1.0,1,5)
density_student(1,0.1,5)
LLN_Poisson = function(lambda, n) { #n este nr de generari
sum = 0;
for(i in 1:n) {
u = rpois(1, lambda); #generarea unei var aleatorii si pois de poisson , 1 vine de la fptul ca generam cate un nr
sum = sum + u;  #X1+X2+...+Xn
}
return(sum/n);
}
LLN_Poisson(2,100)
LLN_Poisson(2,10000)
LLN_Poisson(2,1000000)
LLN_Poisson(2,100000)
LLN Poisson = function(lambda, n) {
LLN_Poisson = function(lambda, n) {
return(mean(rpois(n, lambda))); #
}
LLN_Poisson(2,100000)
LLN_Gamma = function(alfa, lambda, n) {
return(mean(rgamma(n, alfa, lambda)));
}
LLN_Gamma(1,2,100000)
LLN_Exp = function(lambda, n) {
return(mean(rexp(n, lambda)));
}
LLN_Exp(2,1000000)
#II.1.a)
LLN_Exp = function(m,p, n) {
return(mean(rbinom(n, m,p)));
}
LLN_Exp(5,0.2,100000000)
LLN_Exp(5,0.2,100000000)
CLT_Poisson = function(lambda, n, N, z) { # lambda distributie, N sa fie suficient de mare pt multe astfel de sume,
expectation = lambda; #media teoretica a unei var aleatoare
st_dev = lambda;
upper_bound = z * st dev/sqrt(n) + expectation;
CLT_Poisson = function(lambda, n, N, z) { # lambda distributie, N sa fie suficient de mare pt multe astfel de sume,
expectation = lambda; #media teoretica a unei var aleatoare
st_dev = lambda;
upper_bound = z*st_dev/sqrt(n) + expectation;
sum = 0;
for(i in 1:N) { #calculam P
x_n = mean(rpois(n, lambda));
if(x_n ⩽ upper_bound) {
CLT_Poisson = function(lambda, n, N, z) { # lambda distributie, N sa fie suficient de mare pt multe astfel de sume,
expectation = lambda; #media teoretica a unei var aleatoare
st_dev = lambda;
upper_bound = z*st_dev/sqrt(n) + expectation;
sum = 0;
for(i in 1:N) { #calculam P
x_n = mean(rpois(n, lambda));
if(x_n <= upper_bound) {
sum = sum + 1; # P_N
}
}
return(sum/N,pnorm(z)); #X la k de i sunt valori simulate conform distributiei date Poisson ın cazul exercitiului de fata).Se compara apoi aceasta probabilitate cu pnorm(z).
}
CLT_Poisson(2,30,10000,1)
CLT_Poisson = function(lambda, n, N, z) { # lambda distributie, N sa fie suficient de mare pt multe astfel de sume,
expectation = lambda; #media teoretica a unei var aleatoare
st_dev = lambda;
upper_bound = z*st_dev/sqrt(n) + expectation;
sum = 0;
for(i in 1:N) { #calculam P
x_n = mean(rpois(n, lambda));
if(x_n <= upper_bound) {
sum = sum + 1; # P_N
}
}
return(c(sum/N,pnorm(z)));
#X la k de i sunt valori simulate conform distributiei date Poisson ın cazul exercitiului de fata).Se compara apoi aceasta probabilitate cu pnorm(z).
}
CLT_Poisson(2,30,10000,1)
CLT_Poisson(2,1000,10000,1)
CLT_Exp = function(lambda, n, N, z) { # lambda distributie, N sa fie suficient de mare pt multe astfel de sume,
expectation = 1/lambda;
st_dev = 1/ lambda;
upper_bound = z*st_dev/sqrt(n) + expectation;
sum = 0;
for(i in 1:N) {
x_n = mean(rpois(n, lambda));
if(x_n <= upper_bound) {
sum = sum + 1;
}
} #Obtinem distributii exponentiale
return(c(sum/N,pnorm(z))); #pt multi-argumets
}
CLT_Exp = function(lambda, n, N, z) { # lambda distributie, N sa fie suficient de mare pt multe astfel de sume,
expectation = 1/lambda;
st_dev = 1/ lambda;
upper_bound = z*st_dev/sqrt(n) + expectation;
sum = 0;
for(i in 1:N) {
x_n = mean(rexp(n, lambda));
if(x_n <= upper_bound) {
sum = sum + 1;
}
} #Obtinem distributii exponentiale
return(c(sum/N,pnorm(z))); #pt multi-argumets
}
CLT_Exp(2,30,100000,0)
binomial_probability = function(n, p, k) {
expectation = n*p;
variance = n*p*(1 - p);
standard_deviation = sqrt(variance);
q = (k + 0.5)/standard_deviation;
return(1 - pnorm(q));
}
binomial_probability = function(n, p, k) {
expectation = n*p;
variance = n*p*(1 - p);  # X>k
standard_deviation = sqrt(variance);
q = (k + 0.5)/standard_deviation;
return(1 - pnorm(q));
}
binomial_probability = function(n, p, k) {
expectation = n*p;##media pt distr liniara
variance = n*p*(1 - p);  # X>k dispersia
standard_deviation = sqrt(variance);
q = (k + 0.5)/standard_deviation; #
return(1 - pnorm(q));
}
binomial_probability(50,0.3,1.0)
binomial_probability(50,0.3,10
binomial_probability(50,0.3,10)
binomial_probability = function(n, p, k) {
expectation = n*p;##media pt distr liniara
variance = n*p*(1 - p);  # X>k dispersia
standard_deviation = sqrt(variance);
q = (k + 0.5)/standard_deviation; #
return(1 - pnorm(q));
}
binomial_probability(50,0.3,10)
densitynorm=function(m,sigma,n,a)
{
x = seq(0, a, n);
y = dnorm(x,mean=m, sd= sigma)
plot(x, y, type = "l"lwd=2, col="blue",
densitynorm=function(m,sigma,n,a)
{
x = seq(0, a, n);
y = dnorm(x,mean=m, sd= sigma)
plot(x, y, type = "l",lwd=2, col="blue",
xlab="x", ylab="f(x)",
main=paste("Densitatea probabilitatii pentru distributia Normala cu media=", m, "si deviatia standard=", sigma)))
densitynorm=function(m,sigma,n,a)
{
x = seq(0, a, n);
y = dnorm(x,mean=m, sd= sigma)
plot(x, y, type = "l",lwd=2, col="blue",
xlab="x", ylab="f(x)",
main=paste("Densitatea probabilitatii pentru distributia Normala cu media=", m, "si deviatia standard=", sigma))
}
densitynorm(0,1,3,100)
density_norm=function(m,sigma,n,a)
{
x = seq(0, a, n);
y = dnorm(x,mean=m, sd= sigma)
plot(x, y, type = "l",lwd=2, col="blue",
xlab="x", ylab="f(x)")
}
density_norm(0,1,3,100)
#II.2.
Student = function()
{
# valori ale lui n si r
n_values <- c(1000, 10000, 100000, 1000000)
r_values <- c(1, 2, 3, 4, 5)
cat("START\n")
for (r in r_values)
{
if (r == 1 || r == 2)
next  # nu putem folosi teorema centrala a limitei pentru r=1
sigma <- sqrt(r/(r-2))  # deviatia standard
for (n in n_values)
{
sigma_medie <- sigma/sqrt(n)  # deviatia standard a mediei aritmetice
cat("Pentru n =", n, "si r =", r, ", deviatia standard a mediei aritmetice a", n, "variabile aleatoare Xi este", sigma_medie, "\n")
}
}
cat("END\n")
}
Student()
