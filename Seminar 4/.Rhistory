return(s/N)
}
MCnrdays21(21)
#IV.1.
set.seed(123)  # pentru reproducibilitate
p_X <- 0.3  # parametrul geometric pentru X
p_Y <- 0.5  # parametrul geometric pentru Y
N <- 100  # numărul inițial de simulări
z <- qnorm(0.975)  # nivel de încredere 0.95
X <- rgeom(N, p_X)  # generăm N valori aleatoare pentru X
Y <- rgeom(N, p_Y)  # generăm N valori aleatoare pentru Y
prob_antet <- mean(X < Y/2)  # estimăm probabilitatea inițială
sigma <- sqrt(prob_antet * (1 - prob_antet) / N)  # deviația standard estimată
e <- 0.005  # eroarea maximă admisă
n <- (z * sigma / e)^2  # numărul de simulări necesare
n  # afișăm numărul de simulări necesare
disc_area = function(N) { # imi da nr de pct pe care le generez
NC = 0;  #va numara pct care cad in interiorul cercului
for(i in 1:N) {
x = runif(1, -1, 1); # genereaza uniform 1 valoare intre -1 si 1
y = runif(1, -1, 1);
if(x*x + y*y <= 1) #daca pct e in interior
NC = NC + 1;
}
return(4*NC/N); #o estimare a ariei cercului  4 este aria patratului in care am incadrat discul
}
disc_area(10000)
disc_area(50000)
Sphere_vol=function(N)
{
NC=0;
for(i in 1:N)
{
x=runif(1,-1,1)
y=runif(1,-1,1)
z=runif(1,-1,1)
if(sqrt(x*x + y*y + z*z) <= 1)
NC=NC+1
}
V=8*(NC/N)
exactV=(4*pi)/3
eroareAbsoluta=abs(V-exactV)
eroareRelativa=eroareAbsoluta/exactV
cat("Volumul sferei unitate este ", V,", eroarea absoluta este ", eroareAbsoluta,", iar eroarea relativa este ", eroareRelativa)
}
Sphere_vol = function(N)
{
NC=0;
for(i in 1:N)
{
x=runif(1,-1,1)
y=runif(1,-1,1)
z=runif(1,-1,1)
if(x*x + y*y + z*z <= 1)  #sa fie in interiorul sefrei
NC=NC+1
}
return(8*NC/N);
exactV=(4*pi)/3
abs_err = abs(Sphere_vol(10000)-exactV)
rel_err = abs_err/exactV*100
cat("Volumul sferei unitate este ", V,", eroarea absoluta este ", abs_err,", iar eroarea relativa este ", rel_err)
}
Sphere_vol = function(N)
{
NC=0;
for(i in 1:N)
{
x=runif(1,-1,1)
y=runif(1,-1,1)
z=runif(1,-1,1)
if(x*x + y*y + z*z <= 1)  #sa fie in interiorul sefrei
NC=NC+1
}
return(8*NC/N);
exactV=(4*pi)/3
abs_err = abs(Sphere_vol(10000)-exactV)
rel_err = abs_err/exactV*100
print( cat("Volumul sferei unitate este ", V,", eroarea absoluta este ", abs_err,", iar eroarea relativa este ", rel_err))
}
Sphere_vol = function(N)
{
NC=0;
for(i in 1:N)
{
x=runif(1,-1,1)
y=runif(1,-1,1)
z=runif(1,-1,1)
if(x*x + y*y + z*z <= 1)  #sa fie in interiorul sefrei
NC=NC+1
}
return(8*NC/N);
}
exactV=(4*pi)/3
abs_err = abs(Sphere_vol(10000)-exactV)
rel_err = abs_err/exactV*100
print( cat("Volumul sferei unitate este ", V,", eroarea absoluta este ", abs_err,", iar eroarea relativa este ", rel_err))
Sphere_vol = function(N)
{
NC=0;
for(i in 1:N)
{
x=runif(1,-1,1)
y=runif(1,-1,1)
z=runif(1,-1,1)
if(x*x + y*y + z*z <= 1)  #sa fie in interiorul sefrei
NC=NC+1
}
return(8*NC/N);
}
exactV=(4*pi)/3
abs_err = abs(Sphere_vol(10000)-exactV)
rel_err = abs_err/exactV*100
print( cat("Volumul sferei unitate este ",exactV,", eroarea absoluta este ", abs_err,", iar eroarea relativa este ", rel_err))
MCintegration = function(N) {  #nr de puncte generate pentru estimarea integralei
sum = 0; #suma valorilor fct in punctele generate
for(i in 1:N) {
u = runif(1, 0, 10); Ui
sum = sum + exp(-u*u/2); # suma din h(Ui)
}
return(10*sum/N); #(b-a)/N *suma de la 1 la N de h(Ui)
}
MCintegration(10000)
MCintegration = function(N) {  #nr de puncte generate pentru estimarea integralei
sum = 0; #suma valorilor fct in punctele generate
for(i in 1:N) {
u = runif(1, 0, 10); #Ui
sum = sum + exp(-u*u/2); # suma din h(Ui)
}
return(10*sum/N); #(b-a)/N *suma de la 1 la N de h(Ui)
}
MCintegration(10000)
MCintegraverage= function(k, N) {
estimates =c() #initializare vector
for(i in 1:k){
estimates[i] = MCintegration(N);
}
print(mean(estimates)); #media tuturor estimarilor
print(sd(estimates)); #deviatia estimarilor
}
MCintegraverage(30, 20000)
MCintegraverage(30, 50000)
MCimprovedintegration = function(N) {
sum = 0;
for(i in 1:N) {
u = rexp(1, 1); # Generăm un punct aleator 'u' dintr-o distribuție exponentială cu parametrul 1
sum = sum + exp(-u*u)/exp(-u); # aici luam distributia exponentiala
}
return(sum/N);
}
#Ne spune cat de bune sunt estimarile (l am ales pe N)
MCimprvdintegraverage= function(k, N) {
estimates = c( );
for(i in 1:k)
estimates[i] = MCimprovedintegration(N);
print(mean(estimates));
print(sd(estimates));
}
MCimprvdintegraverage(30, 20000)
MCintegration = function(N) {  #nr de puncte generate pentru estimarea integralei
sum = 0; #suma valorilor fct in punctele generate
for(i in 1:N) {
u = runif(1, 0, pi); #Ui luam variabilele uniforme
sum = sum + sin(u)^2; # suma din h(Ui)
}
return(pi*sum/N); #(b-a)/N *suma de la 1 la N de h(Ui)
}
MCintegration(10000)
MCintegrationa = function(N) {  #nr de puncte generate pentru estimarea integralei
sum = 0; #suma valorilor fct in punctele generate
for(i in 1:N) {
u = runif(1, 0, pi); #Ui luam variabilele uniforme
sum = sum + sin(u)^2; # suma din h(Ui)
}
return(pi*sum/N); #(b-a)/N *suma de la 1 la N de h(Ui)
}
MCintegrationa = function(N) {  #nr de puncte generate pentru estimarea integralei
sum = 0; #suma valorilor fct in punctele generate
for(i in 1:N) {
u = runif(1, 0, pi); #Ui luam variabilele uniforme
sum = sum + sin(u)^2; # suma din h(Ui)
}
return(pi*sum/N); #(b-a)/N *suma de la 1 la N de h(Ui)
}
MCintegrationa(10000)
print(cat("eroarea abs este ", abs(MCintegrationa(10000)-pi/2)))
print (cat("eroarea relativa",(abs(MCintegrationa(10000)-pi/2)/pi/2))
MCintegrationa = function(N) {  #nr de puncte generate pentru estimarea integralei
MCintegrationa(10000)
print(cat("eroarea abs este ", abs(MCintegrationa(10000)-pi/2)))
print(cat("eroarea relativa",((abs(MCintegrationa(10000)-pi/2)/(pi/2)))
intMC=MCintegrationa(10000)
MCintegrationa = function(N) {  #nr de puncte generate pentru estimarea integralei
sum = 0; #suma valorilor fct in punctele generate
for(i in 1:N) {
u = runif(1, 0, pi); #Ui luam variabilele uniforme
sum = sum + sin(u)^2; # suma din h(Ui)
}
return(pi*sum/N); #(b-a)/N *suma de la 1 la N de h(Ui)
}
intMC=MCintegrationa(10000)
print(intMC)
MCintegrationa = function(N) {  #nr de puncte generate pentru estimarea integralei
sum = 0; #suma valorilor fct in punctele generate
for(i in 1:N) {
u = runif(1, 0, pi); #Ui luam variabilele uniforme
sum = sum + sin(u)^2; # suma din h(Ui)
}
return(pi*sum/N); #(b-a)/N *suma de la 1 la N de h(Ui)
}
intMC=MCintegrationa(10000)
print(intMC)
print(cat("eroarea abs este ", abs(intMC-pi/2)))
print(cat("eroarea relativa",((abs(intMC-pi/2)/(pi/2)))
intMC=MCintegrationa(10000)
MCintegrationa = function(N) {  #nr de puncte generate pentru estimarea integralei
sum = 0; #suma valorilor fct in punctele generate
for(i in 1:N) {
u = runif(1, 0, pi); #Ui luam variabilele uniforme
sum = sum + sin(u)^2; # suma din h(Ui)
}
return(pi*sum/N); #(b-a)/N *suma de la 1 la N de h(Ui)
}
intMC=MCintegrationa(10000)
print(intMC)
print(cat("eroarea abs este ", abs(intMC-pi/2)))
intMC=MCintegrationa(10000)
print(intMC)
print(cat("eroarea abs este ", abs(intMC-pi/2)))
print(cat("eroarea relativa", abs(intMC-pi/2)/(pi/2)))
Nrdays=function()
{
nrdays=1 #var aleatoare
lasterrors=c(27,31) #in primele 2 zile sunt gasite 27 si 31 de erori
nrerrors=27 #nr de erori actual
while(nrerrors>0) #mergem cat timp avem erori
{
lambda=min(lasterrors) #vect cu min de erori
nrerrors=rpois(1,lambda) #distributie Poisson
lasterrors=c(nrerrors,lasterrors[1]) #update (nr de erori curente in ziua resp, orimul el din vect lasterrors) )
nrdays=nrdays+1 # incrementam nr de zile
}
return(nrdays)  #simulam var aleatoare
}
Nrdays()
MCnrdays=function(N)
{
s=0
for(i in 1:N)
s=s+Nrdays()
return(s/N)
}
MCnrdays(1000)
Nrdays_media = function()
{
nrdays = 1
lasterrors = c(9, 15, 13)
nrerrors = sum(lasterrors) # suma celor 3 zile
while (nrerrors > 0)
{
lambda = median(lasterrors) # media celor 3 zile
nrerrors = rpois(1, lambda)
lasterrors = c(nrerrors, lasterrors[1:2])
nrdays = nrdays + 1
}
return(nrdays)
}
Nrdays_media()
Nrdays_media = function()
{
nrdays = 1
lasterrors = c(9, 15, 13)
nrerrors = sum(lasterrors) # suma celor 3 zile
while (nrerrors > 0)
{
lambda = median(lasterrors) # media celor 3 zile
nrerrors = rpois(1, lambda)
lasterrors = c(nrerrors, lasterrors[1:2])
nrdays = nrdays + 1
}
return(nrdays)
}
Nrdays_media()
MCnrdays_media = function(N)
{
s = 0
for (i in 1:N)
s = s + Nrdays_media()
return(s/N)
}
MCnrdays_media(100)
MCnrdays_media(10000)
# Definim functia parabolei
parabola <- function(x) {
-2*x^2 + 5*x - 2
}
# Definim numarul de puncte generate
n <- 10000
# Generam punctele aleatoare
x <- runif(n, 0, 2)
y <- runif(n, 0, max(parabola(x)))
# Verificam punctele
subparabola <- y <= parabola(x)
# Calculam aria estimata
aria_estimata <- sum(subparabola) / n * 2 * max(parabola(x))
# Calculam aria exacta prin integrare
aria_exacta <- abs(integrate(parabola, 0, 2)$value)
# Calculam eroarea relativa
eroare_relativa <- abs(aria_estimata - aria_exacta) / aria_exacta
# Afisam rezultatele
cat("Aria estimata: ", aria_estimata, "\n")
cat("Aria exacta: ", aria_exacta, "\n")
cat("Eroarea relativa: ", eroare_relativa, "\n")
MCnrdays21(10000)
alfa = 1 - 0.95
z = qnorm(alfa/2)
epsilon = 0.01
p = 0.246
Nmin = p(1 - p)*(z/epsilon)ˆ 2
alfa = 1 - 0.95
z = qnorm(alfa/2)
epsilon = 0.01
p = 0.246
Nmin = p*(1- p)*(z/epsilon)^2
Nmin
MCnrdays21(Nmin + 1)
Nmin = (1/4)*(z/epsilon)^2
Nmin
MCnrdays(Nmin + 1)
MCimprovedintegration <- function(k,N) {
sum <- 0
for (i in 1:N) {
u <- rexp(1, k)
sum <- sum + exp(-2 * u^2)
}
return( sqrt(pi/8)*(sum / N))
}
MCimprovedintegration(3,50000)
print(estimated_value)
parabola = function(x) { # Definim functia parabolei
-2*x^2 + 5*x - 2
}
parabola = function(x) { # Definim functia parabolei
-2*x^2 + 5*x - 2
}
n <- 10000 #val uniforme
x <- runif(n, 0, 2)
y <- runif(n, 0, 2)
subparabola <- y <= parabola(x) #Verif punctele
aria_estimata <- sum(subparabola) / n * 2 * max(parabola(x))
aria_exacta <- abs(integrate(parabola, 0, 2)$value)
rel_err <- abs(aria_estimata - aria_exacta) / aria_exacta
cat("Aria estimata: ", aria_estimata, "\n")
cat("Aria exacta: ", aria_exacta, "\n")
cat("Eroarea relativa: ", rel_err, "\n")
parabola = function(x) { # Definim functia parabolei
return(-2*x^2 + 5*x - 2)
}
n <- 10000 #val uniforme
x <- runif(n, 0, 2)
y <- runif(n, 0, 2)
subparabola <- y <= parabola(x) #Verif punctele
estimatA <- sum(subparabola) / n * 2 * max(parabola(x))
exactA <- abs(integrate(parabola, 0, 2)$value)
rel_err <- abs(estimatA - exactA) / exactA
cat("Aria estimata: ", aria_estimata, "\n")
cat("Aria exacta: ", aria_exacta, "\n")
cat("Eroarea relativa: ", rel_err, "\n")
MCimprovedintegrationb = function(N) {  #nr de puncte generate pentru estimarea integralei
sum = 0; #suma valorilor fct in punctele generate
for(i in 1:N) {
u = runif(1, 1, 4); #a=1 si b=4
sum = sum + exp(u);
}
return(3*sum/N); #((b-a)*sum/N)
}
exact_values <- c(51.87987)
estimated_values <- MCimprovedintegrationb(50000)
# Calcularea erorilor absolute și relative
absolute_errors <- abs(estimated_values - exact_values)
relative_errors <- absolute_errors / exact_values
print(cat("Valorile exacte ale integralelor:",exact_values)
MCimprovedintegrationb = function(N) {  #nr de puncte generate pentru estimarea integralei
print(cat("Valorile exacte ale integralelor:",exact_values))
#II.1.b)
MCimprovedintegrationb = function(N) {  #nr de puncte generate pentru estimarea integralei
sum = 0; #suma valorilor fct in punctele generate
for(i in 1:N) {
u = runif(1, 1, 4); #a=1 si b=4
sum = sum + exp(u);
}
return(3*sum/N); #((b-a)*sum/N)
}
exact_values <- c(51.87987)
estimated_values <- MCimprovedintegrationb(50000)
# Calcularea erorilor absolute și relative
absolute_errors <- abs(estimated_values - exact_values)
relative_errors <- absolute_errors / exact_values
# Afișarea rezultatelor
print(cat("Valorile exacte ale integralelor:",exact_values))
print(cat("Valorile estimate ale integralelor:", estimated_values))
print(cat("Erorile absolute corespunzătoare:",absolute_errors))
print(cat("Erorile relative corespunzătoare:",relative_errors))
#II.1.d)
MCimprovedintegrationb = function(N) {  #nr de puncte generate pentru estimarea integralei
sum = 0; #suma valorilor fct in punctele generate
for(i in 1:N) {
u = runif(1, 1, 4); #a=1 si b=4
sum = sum + exp(u);
}
return(3*sum/N); #((b-a)*sum/N)
}
exact_values <- c(51.87987)
estimated_values <- MCimprovedintegrationb(50000)
# Calcularea erorilor absolute și relative
absolute_errors <- abs(estimated_values - exact_values)
relative_errors <- absolute_errors / exact_values
# Afișarea rezultatelor
print(cat("Valorile exacte ale integralelor:",exact_values,"\n"))
print(cat("Valorile estimate ale integralelor:", estimated_values))
print(cat("Erorile absolute corespunzătoare:",absolute_errors))
print(cat("Erorile relative corespunzătoare:",relative_errors))
estimatemeanX = function(N)
{
val = runif(1)
if (val <= 0.75) # Daca val <= 3/4, alegem primul mecanic cu lambda = 4
X = rexp(1, 4)
else
X = (rexp(1, 12) + 3)# Altfel, alegem al doilea mecanic cu lambda=12
sum = 0
for (i in 1:N)
sum = sum + X
return(sum / N) # se calc media
}
estimatemeanX(100)
Simulate_virus_infection <- function(N, k) {
infectedcomp <- rep(0, 40)  # Vector pentru a urmări starea fiecărui computer (0 = curat, 1 = infectat)
infectedcomp[1] <- 1  # Setam primul computer ca infectat
for (i in 2:N) {
for (j in 1:40) {
if (infectedcomp[j] == 1) {
for (l in 1:40) {
if (l != j && infectedcomp[l] == 0) {
if (runif(1) < 0.2) {
infectedcomp[l] <- 1
}
}
}
}
}
infected_indexes <- which(infectedcomp == 1)
if (length(infected_indexes) > k) {
remove_indexes <- sample(infected_indexes, k)
infectedcomp[remove_indexes] <- 0
} else {
infectedcomp[infected_indexes] <- 0
}
if (all(infectedcomp == 1)) {
return(TRUE)
}
}
return(FALSE)
}
estimate_probability <- function(N, k, event_func) {
event_count <- 0
for (i in 1:N) {
if (event_func(N, k)) {
event_count <- event_count + 1
}
}
return(event_count / N)
}
Simulate_virus_infection <- function(N, k) {
infectedcomp <- rep(0, 40)  # Vector pentru a urmări starea fiecărui computer (0 = curat, 1 = infectat)
infectedcomp[1] <- 1  # Setam primul computer ca infectat
for (i in 2:N) {
for (j in 1:40) {
if (infectedcomp[j] == 1) {
for (l in 1:40) {
if (l != j && infectedcomp[l] == 0) {
if (runif(1) < 0.2) {
infectedcomp[l] <- 1
}
}
}
}
}
infected_indexes <- which(infectedcomp == 1)
if (length(infected_indexes) > k) {
remove_indexes <- sample(infected_indexes, k)
infectedcomp[remove_indexes] <- 0
} else {
infectedcomp[infected_indexes] <- 0
}
if (all(infectedcomp == 1)) {
return(TRUE)
}
}
return(FALSE)
}
estimate_probability <- function(N, k, event_func) {
event_count <- 0
for (i in 1:N) {
if (event_func(N, k)) {
event_count <- event_count + 1
}
}
return(event_count / N)
}
N <- 10000
k_values <- c(4, 6, 8, 10)
#a)Estimati probabilitatea ca intr-o anumita zi toate computerele sa fie infectate.
prob_allinfected <- estimate_probability(N, k_values[1], function(N, k) Simulate_virus_infection(N, k))
