y=c(1,1,0,1,0,1,1,1,0)
B=matrix(y,3,3)
D=A%*%B
D
x=c(0,0,1,0,1,0,1,1,0)
A=matrix(x,3,3)
y=c(1,1,0,1,0,1,1,1,0)
B=matrix(y,3,3)
D=A%*%B
D
x=c(0,0,1,0,1,0,1,1,0)
A=matrix(x,3,3)
y=c(1,1,0,1,0,1,1,1,0)
B=matrix(y,3,3)
D=A%*%B
D
x=c(0,0,1,0,1,0,1,1,0)
A=matrix(x,3,3)
y=c(1,1,0,1,0,1,1,1,0)
B=matrix(y,3,3)
D=A%*%B
D
x=c(0,0,1,0,1,0,1,1,0)
A=matrix(x,3,3)
y=c(1,1,0,1,0,1,1,1,0)
B=matrix(y,3,3)
D=A%*%B
D
x=c(0,0,1,0,1,0,1,1,0)
A=matrix(x,3,3)
y=c(1,1,0,1,0,1,1,1,0)
B=matrix(y,3,3)
D=A%*%B
D
x=c(0,0,1,0,1,0,1,1,0)
A=matrix(x,3,3)
y=c(1,1,0,1,0,1,1,1,0)
B=matrix(y,3,3)
D=A%*%B
D
x=c(0,0,1,0,1,0,1,1,0)
A=matrix(x,3,3)
y=c(1,1,0,1,0,1,1,1,0)
B=matrix(y,3,3)
D=A%*%B
D
x=c(0,0,1,0,1,0,1,1,0)
A=matrix(x,3,3)
y=c(1,1,0,1,0,1,1,1,0)
B=matrix(y,3,3)
D=A%*%B
D
x=c(0,0,1,0,1,0,1,1,0)
A=matrix(x,3,3)
y=c(1,1,0,1,0,1,1,1,0)
B=matrix(y,3,3)
D=A%*%B
D
Z=C(0,0,0,0,0,0,0,0,1)
x=c(0,0,1,0,1,0,1,1,0)
A=matrix(x,3,3)
y=c(1,1,0,1,0,1,1,1,0)
B=matrix(y,3,3)
D=A%*%B
D
z=c(0,0,0,0,0,0,0,0,1)
M=matrix(z,3,3)
C=D-M
C
x=c(0,0,1,0,1,0,1,1,0)
A=matrix(x,3,3)
y=c(1,1,0,1,0,1,1,1,0)
B=matrix(y,3,3)
D=A%*%B
D
z=c(0,0,0,0,0,0,0,0,1)
M=matrix(z,3,3)
C=D-M
C
matrixproduct(A,B,C)
matrixproduct(A,B,C)
matrixproduct(A,B,C)
matrixproduct(A,B,C)
matrixproduct(A,B,C)
#Functia de mai jos da o probabilitate a erorii sub 2^-k.
matrixproductreduce = function(A, B, C, k) {
for(i in 1:k)
if(!matrixproduct(A, B, C))
return(FALSE);
}
return(TRUE);
matrixproductreduce(A,B,C)
matrixproductreduce = function(A, B, C, k) {
for(i in 1:k)
if(!matrixproduct(A, B, C))
return(FALSE);
}
return(TRUE);
matrixproductreduce = function(A, B, C, k) {
for(i in 1:k)
if(!matrixproduct(A, B, C))
return(FALSE)
return(TRUE)
}
matrixproductreduce(A,B,C,10)
matrixproductreduce(A,B,D,10)
leaves = c(0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0)
treeeval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0)
return(leaves[2*i +1 -len + 1];
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0)
return(leaves[2*i +1 -len + 1]
return(1);}
leaves = c(0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0)
treeeval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0)#se alege copilul din st
return(leaves[2*i +1 -len + 1]
return(1)}
leaves = c(0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0)
treeeval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0)#se alege copilul din st
return(leaves[2*i +1 -len + 1])
return(1)}
else {
if(leaves[2*i + 1 -len + 1] == 0)
return(leaves[2*i -len + 1])
return(1)}
}
if((floor(log(i,2))%% 2 == 0)){ # nodul i este de tip MIN
if(a <= 0.5) {
if(treeeval(2*i, leaves) == 1)
return(treeeval(2*i + 1, leaves))
return(0) }
else {
if(treeeval(2*i +1, leaves) == 1)
return(treeeval (2*i, leaves))
return(0)
}
}
if((floor(log(i,2))%% 2 == 1)){ # nodul i este de tip MAX
if(a <= 0.5) {
if(treeeval(2*i, leaves) == 0)
return(treeeval(2*i + 1, leaves))
return(1)}  #
else {
if(treeeval(2*i +1, leaves) == )
treeeval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0)#se alege copilul din st
return(leaves[2*i +1 -len + 1])
return(1)}
else {
if(leaves[2*i + 1 -len + 1] == 0)
return(leaves[2*i -len + 1])
return(1)}
}
if((floor(log(i,2))%% 2 == 0)){ # nodul i este de tip MIN
if(a <= 0.5) {
if(treeeval(2*i, leaves) == 1)
return(treeeval(2*i + 1, leaves))
return(0) }
else {
if(treeeval(2*i +1, leaves) == 1)
return(treeeval (2*i, leaves))
return(0)
}
}
if((floor(log(i,2))%% 2 == 1)){ # nodul i este de tip MAX
if(a <= 0.5) {
if(treeeval(2*i, leaves) == 0)
return(treeeval(2*i + 1, leaves))
return(1)}  #
else {
if(treeeval(2*i +1, leaves) == )
}
if((floor(log(i,2))%% 2 == 1)){ # nodul i este de tip MAX
if(a <= 0.5) {
if(treeeval(2*i, leaves) == 0)
return(treeeval(2*i + 1, leaves))
return(1)}  #
else {
if(treeeval(2*i +1, leaves) == )
treeeval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0)#se alege copilul din st
return(leaves[2*i +1 -len + 1])
return(1)}
else {
if(leaves[2*i + 1 -len + 1] == 0)
return(leaves[2*i -len + 1])
return(1)}
}
if((floor(log(i,2))%% 2 == 0)){ # nodul i este de tip MIN
if(a <= 0.5) {
if(treeeval(2*i, leaves) == 1)
return(treeeval(2*i + 1, leaves))
return(0) }
else {
if(treeeval(2*i +1, leaves) == 1)
return(treeeval(2*i, leaves))
return(0)
}
}
if((floor(log(i,2))%% 2 == 1)){ # nodul i este de tip MAX
if(a <= 0.5) {
if(treeeval(2*i, leaves) == 0)
return(treeeval(2*i + 1, leaves))
return(1)}  #
else {
if(treeeval(2*i +1, leaves) == 0)
return(treeeval(2*i, leaves))
return(1)
}
}
}
}
treeeval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0)#se alege copilul din st
return(leaves[2*i +1 -len + 1])
return(1)}
else {
if(leaves[2*i + 1 -len + 1] == 0)
return(leaves[2*i -len + 1])
return(1)}
}
if((floor(log(i,2))%% 2 == 0)){ # nodul i este de tip MIN
if(a <= 0.5) {
if(treeeval(2*i, leaves) == 1)
return(treeeval(2*i + 1, leaves))
return(0) }
else {
if(treeeval(2*i +1, leaves) == 1)
return(treeeval(2*i, leaves))
return(0)
}
}
if((floor(log(i,2))%% 2 == 1)){ # nodul i este de tip MAX
if(a <= 0.5) {
if(treeeval(2*i, leaves) == 0)
return(treeeval(2*i + 1, leaves))
return(1)}  #
else {
if(treeeval(2*i +1, leaves) == 0)
return(treeeval(2*i, leaves))
return(1)
}
}
}
leaves = c(0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0)
treeeval(1,leaves)
gametreeeval = function(leaves) {
return(treeeval (1, leaves))
}
simulare_variabila_aleatoare =function(val, prob) {
if (length(val) != length(prob)) {
stop("Lungimea listelor de val și prob diferita, deci eroare.")
}
if (abs(sum(prob) - 1) != 0) {
stop("Suma probabilităților trebuie să fie 1.")
}
U <- runif(1) # generaram o valoare  aleatore uniforma între 0 și 1
suma_prob = 0 # Init suma prob cu 0
for (i in 1:length(val)) { #Parcurgerea
suma_prob <- suma_prob + prob[i]
if (r <= suma_prob) {
return(val[i]) # Dacă suma probabilităților depășește numărul generat aleatoriu, returnăm valoarea curentă
}
}
# În cazul în care nu am returnat încă o valoare, există o problemă
stop("Prob nu sunt valide.")
}
valori <- c('A', 'B', 'C')
probabilitati <- c(0.3, 0.4, 0.3)
valoare_generata <- simulare_variabila_aleatoare(valori, probabilitati)
simulare_variabila_aleatoare =function(val, prob) {
if (length(val) != length(prob)) {
stop("Lungimea listelor de val și prob diferita, deci eroare.")
}
U <- runif(1) # generaram o valoare  aleatore uniforma între 0 și 1
suma_prob = 0 # Init suma prob cu 0
suma_prob_initiala=0
for (i in 1:length(val)) { #Parcurgerea
suma_prob_initiala=suma_prob # suma prob pana la i-1
suma_prob=suma_prob + prob[i] # suma prob pana la i
if(U<suma_prob && U>=suma_prob_initiala) {
return(val[i])
}
}
# În cazul în care nu am returnat încă o valoare, există o problemă
stop("Prob nu sunt valide.")
}
valori <- c('A', 'B', 'C')
probabilitati <- c(0.3, 0.4, 0.3)
valoare_generata <- simulare_variabila_aleatoare(valori, probabilitati)
print(valoare_generata)
simulare_variabila_aleatoare =function(val, prob) {
if (length(val) != length(prob)) {
stop("Lungimea listelor de val și prob diferita, deci eroare.")
}
U <- runif(1) # generaram o valoare  aleatore uniforma între 0 și 1
suma_prob = 0 # Init suma prob cu 0
suma_prob_initiala=0
for (i in 1:length(val)) { #Parcurgerea
suma_prob_initiala=suma_prob # suma prob pana la i-1
suma_prob=suma_prob + prob[i] # suma prob pana la i
if(U<suma_prob && U>=suma_prob_initiala) {
return(val[i])
}
}
# În cazul în care nu am returnat încă o valoare, există o problemă
stop("Prob nu sunt valide.")
}
valori <- c('A', 'B', 'C')
probabilitati <- c(0.3, 0.7, 0.3)
valoare_generata <- simulare_variabila_aleatoare(valori, probabilitati)
print(valoare_generata)
simulare_variabila_aleatoare =function(val, prob) {
if (length(val) != length(prob)) {
stop("Lungimea listelor de val și prob diferita, deci eroare.")
}
if (abs(sum(pi) - 1) != 0) {
stop("Suma probabilităților trebuie să fie 1.")
}
U <- runif(1) # generaram o valoare  aleatore uniforma între 0 și 1
suma_prob = 0 # Init suma prob cu 0
suma_prob_initiala=0
for (i in 1:length(val)) { #Parcurgerea
suma_prob_initiala=suma_prob # suma prob pana la i-1
suma_prob=suma_prob + prob[i] # suma prob pana la i
if(U<suma_prob && U>=suma_prob_initiala) {
return(val[i])
}
}
# În cazul în care nu am returnat încă o valoare, există o problemă
stop("Prob nu sunt valide.")
}
valori = c('A', 'B', 'C')
probabilitati =c(0.3, 0.7, 0.3)
valoare_generata <- simulare_variabila_aleatoare(valori, probabilitati)
print(valoare_generata)
simulare_variabila_aleatoare =function(val, prob) {
if (length(val) != length(prob)) {
stop("Lungimea listelor de val și prob diferita, deci eroare.")
}
if (abs(sum(prob) - 1) != 0) {
stop("Suma probabilităților trebuie să fie 1.")
}
U <- runif(1) # generaram o valoare  aleatore uniforma între 0 și 1
suma_prob = 0 # Init suma prob cu 0
suma_prob_initiala=0
for (i in 1:length(val)) { #Parcurgerea
suma_prob_initiala=suma_prob # suma prob pana la i-1
suma_prob=suma_prob + prob[i] # suma prob pana la i
if(U<suma_prob && U>=suma_prob_initiala) {
return(val[i])
}
}
# În cazul în care nu am returnat încă o valoare, există o problemă
stop("Prob nu sunt valide.")
}
valori = c('A', 'B', 'C')
probabilitati =c(0.3, 0.7, 0.3)
valoare_generata <- simulare_variabila_aleatoare(valori, probabilitati)
print(valoare_generata)
simulare_variabila_aleatoare =function(val, prob) {
if (length(val) != length(prob)) {
stop("Lungimea listelor de val și prob diferita, deci eroare.")
}
if (abs(sum(prob) - 1) != 0) {
stop("Suma probabilităților trebuie să fie 1.")
}
U <- runif(1) # generaram o valoare  aleatore uniforma între 0 și 1
suma_prob = 0 # Init suma prob cu 0
suma_prob_initiala=0
for (i in 1:length(val)) { #Parcurgerea
suma_prob_initiala=suma_prob # suma prob pana la i-1
suma_prob=suma_prob + prob[i] # suma prob pana la i
if(U<suma_prob && U>=suma_prob_initiala) {
return(val[i])
}
}
# În cazul în care nu am returnat încă o valoare, există o problemă
stop("Prob nu sunt valide.")
}
valori = c('A', 'B', 'C')
probabilitati =c(0.3, 0.4, 0.3)
valoare_generata <- simulare_variabila_aleatoare(valori, probabilitati)
print(valoare_generata)
simulare_variabila_aleatoare =function(xi, pj) {
if (length(xi) != length(pj)) {
stop("Lungimea listelor de val și prob diferita, deci eroare.")
}
if (abs(sum(pj) - 1) != 0) {
stop("Suma probabilităților trebuie să fie 1.")
}
U <- runif(1) # generaram o valoare  aleatore uniforma între 0 și 1
suma_prob = 0 # Init suma prob cu 0
suma_prob_initiala=0
for (i in 1:length(xi)) { #Parcurgerea
suma_prob_initiala=suma_prob # suma prob pana la i-1
suma_prob=suma_prob + pj[i] # suma prob pana la i
if(U<suma_prob && U>=suma_prob_initiala) {
return(xi[i])
}
}
# În cazul în care nu am returnat încă o valoare, există o problemă
stop("Prob nu sunt valide.")
}
valori = c('A', 'B', 'C')
probabilitati =c(0.3, 0.4, 0.3)
valoare_generata <- simulare_variabila_aleatoare(valori, probabilitati)
print(valoare_generata)
simulare_variabila_aleatoare =function(xi, pj) {
if (length(xi) != length(pj)) {
stop("Lungimea listelor de val și prob diferita, deci eroare.")
}
if (abs(sum(pj) - 1) != 0) {
stop("Suma probabilităților trebuie să fie 1.")
}
U <- runif(1) # generaram o valoare  aleatore uniforma între 0 și 1
suma_prob = 0 # Init suma prob cu 0
suma_prob_initiala=0
for (i in 1:length(xi)) { #Parcurgerea
suma_prob_initiala=suma_prob # suma prob pana la i-1
suma_prob=suma_prob + pj[i] # suma prob pana la i
if(U<suma_prob && U>=suma_prob_initiala) {
return(xi[i])
}
}
# În cazul în care nu am returnat încă o valoare, există o problemă
stop("Prob nu sunt valide.")
}
xi = c('A', 'B', 'C')
pj =c(0.3, 0.4, 0.3)
valoare_generata <- simulare_variabila_aleatoare(xi, pj)
print(valoare_generata)
simulare_variabila_aleatoare =function(xi, pj) {
if (length(xi) != length(pj)) {
stop("Lungimea listelor de val și prob diferita, deci eroare.")
}
if (abs(sum(pj) - 1) != 0) {
stop("Suma probabilităților trebuie să fie 1.")
}
U <- runif(1) # generaram o valoare  aleatore uniforma între 0 și 1
suma_prob = 0 # Init suma prob cu 0
suma_prob_initiala=0
for (i in 1:length(xi)) { #Parcurgerea
suma_prob_initiala=suma_prob # suma prob pana la i-1
suma_prob=suma_prob + pj[i] # suma prob pana la i
if(U<suma_prob && U>=suma_prob_initiala) {
return(xi[i])
}
}
# În cazul în care nu am returnat încă o valoare, există o problemă
stop("Prob nu sunt valide.")
}
xi = c('A', 'B', 'C')
pj =c(0.3, 0.7, 0.3)
valoare_generata <- simulare_variabila_aleatoare(xi, pj)
print(valoare_generata)
simulare_variabila_aleatoare =function(xi, pj) {
if (length(xi) != length(pj)) {
stop("Lungimea listelor de val și prob diferita, deci eroare.")
}
if (abs(sum(pj) - 1) != 0) {
stop("Suma probabilităților trebuie să fie 1.")
}
U <- runif(1) # generaram o valoare  aleatore uniforma între 0 și 1
suma_prob = 0 # Init suma prob cu 0
suma_prob_initiala=0
for (i in 1:length(xi)) { #Parcurgerea
suma_prob_initiala=suma_prob # suma prob pana la i-1
suma_prob=suma_prob + pj[i] # suma prob pana la i
if(U<suma_prob && U>=suma_prob_initiala) {
return(xi[i])
}
}
# În cazul în care nu am returnat încă o valoare, există o problemă
stop("Prob nu sunt valide.")
}
xi = c('A', 'B', 'C')
pj =c(0.3, 0.4, 0.3)
valoare_generata <- simulare_variabila_aleatoare(xi, pj)
print(valoare_generata)
xi = c('A', 'B', 'C')
pj =c(0.3, 0.7, 0.3)
valoare_generata <- simulare_variabila_aleatoare(xi, pj)
print(valoare_generata)
