# Definirea functiei pentru integrare
f <- function(x, a) {
return((x + 1) / sqrt(a - x^2))
}
# Definirea limitelor de integrare
a <- 2  # inlocuiti a cu valoarea dorita
# Calcularea valorii integralei
result <- integrate(f, lower = -1, upper = 1, a = a)
# Afisarea rezultatului
print(result$value)
# Definirea functiei pentru integrare
f = function(x, a) {
return((x + 1) / sqrt(4 - x^2))
}
# Definirea limitelor de integrare
# Calcularea valorii integralei
result <- integrate(f, lower = -1, upper = 1)
# Afisarea rezultatului
print(result$value)
exact_value <- pi / 3
# Compararea cu rezultatul numeric
print(paste("Rezultat numeric:", result$value))
print(paste("Valoare exactă:", exact_value))
# Definirea functiei pentru integrare
IntegralaA = function(x, a) {
return((x + 1) / sqrt(4 - x^2))
}
# Calcularea valorii integralei
result <- integrate(IntegralaA, lower = -1, upper = 1)
# Calcularea valorii exacte a integralei
exact_value <- pi / 3
# Compararea cu rezultatul numeric
print(paste("Rezultat numeric:", result$value))
print(paste("Valoare exactă:", exact_value))
# Definirea functiei pentru integrare
IntegralaA = function(x, a) {
return((x + 1) / sqrt(4 - x^2))
}
# Calcularea valorii integralei
result <- integrate(IntegralaA, lower = -1, upper = 1)
# Calcularea valorii exacte a integralei
exact_value <- pi / 3
#Compararea
comparison <- ifelse(abs(numeric_value - exact_value) < 0.0001, "Aproape egal", "Diferit")
# Afisarea rezultatului
print(paste("Rezultat numeric:", numeric_value))
#C3.
# Definirea functiei pentru integrare
IntegralaA = function(x, a) {
return((x + 1) / sqrt(4 - x^2))
}
# Calcularea valorii integralei
result <- integrate(IntegralaA, lower = -1, upper = 1)
numeric_value <- result$value
# Calcularea valorii exacte a integralei
exact_value <- pi / 3
#Compararea
comparison <- ifelse(abs(numeric_value - exact_value) < 0.0001, "Aproape egal", "Diferit")
# Afisarea rezultatului
print(paste("Rezultat numeric:", numeric_value))
print(paste("Valoare exactă:", exact_value))
print(paste("Comparatie:", comparison))
# Definirea functiei pentru integrare
f = function(x) {
return(1 / (x^2 + 4))
}
# Calcularea valorii integralei
result <- integrate(f, lower = -Inf, upper = 0)
# Definirea functiei de limita a -> -Infinit
limit_func <- function(a) {
return(integrate(f, lower = a, upper = 0)$value)
}
# Calcularea valorii limitei
limit_value <- limit_func(-100000)  # Folosim o valoare foarte mare pentru a aproxima limita
# Definirea functiei pentru integrare
f <- function(x) {
return(1 / (x^2 + 4))
}
# Calcularea valorii integralei
result <- integrate(f, lower = -Inf, upper = 0)
# Definirea functiei de limita a -> -Infinit
limit_func <- function(a) {
return(integrate(f, lower = a, upper = 0)$value)
}
# Calcularea valorii limitei
limit_value <- limit_func(-100000)  # Folosim o valoare foarte mare pentru a aproxima limita
# Definirea functiei pentru integrare
f <- function(x) {
return(1 / (x^2 + 4))
}
# Calcularea valorii integralei
result <- integrate(f, lower = -Inf, upper = 0)
# Definirea functiei de limita a -> -Infinit
limit_func <- function(a) {
return(integrate(f, lower = a, upper = 0)$value)
}
# Calcularea valorii limitei
limit_value <- limit_func(-100000)  # Folosim o valoare foarte mare pentru a aproxima limita
# Definirea functiei pentru integrare
f <- function(x) {
return(1 / (x^2 + 4))
}
# Calcularea valorii integralei
result <- integrate(f, lower = -Inf, upper = 0)
# Definirea functiei de limita a -> -Infinit
limit_func <- function(a) {
return(integrate(f, lower = a, upper = 0)$value)
}
# Calcularea valorii limitei
limit_value <- limit_func(-100000)  # Folosim o valoare foarte mare pentru a aproxima limita
2
10
# Definirea functiei pentru integrare
f <- function(x) {
return(x * exp(x))
}
# Calcularea valorii integralei
result <- integrate(f, lower = -Inf, upper = 0, subdivisions = 10000)
# Definirea functiei de limita a -> -Infinit
limit_func <- function(a) {
return(integrate(f, lower = a, upper = 0, subdivisions = 10000)$value)
}
# Calcularea valorii limitei
limit_value <- limit_func(-100000)  # Folosim o valoare foarte mare pentru a aproxima limita
# Valoarea exacta
exact_value <- -1
# Compararea cu rezultatul numeric
print(paste("Rezultat numeric:", result$value))
print(paste("Valoare exactă:", exact_value))
print(paste("Valoare limită:", limit_value))
#C1
graph_area = function(a, N) {
count = 0;
for(i in 1:N) {
x1 = runif(1, -sqrt(a), sqrt(a))
x2 = runif(1, -sqrt(a), sqrt(a))
x3 = runif(1, 0, a)
if(x3>x1^2+x2^2 && x3<=a)
count = count+1
}
volum = 2*sqrt(a)*2*sqrt(a)*a
return(volum*count/N)
}
rel_error = function(trueval, aprox)
{
return(abs(trueval-aprox)/abs(trueval))
}
rel_error(pi*2^2/2, graph_area(2, 20000))
rel_error(pi*4^2/2, graph_area(4, 20000))
rel_error(pi*10^2/2, graph_area(10, 20000))
Nr_days = function(m, n, p, q)
{
nr_days=1
fake=m
while (fake>0) {
new_fake_today=rbinom(1, n, p)
fake = fake + new_fake_today
deactivated_today = rbinom(1, fake, q)
fake = fake - deactivated_today
nr_days = nr_days+1
}
return(nr_days)
}
Nr_days(100, 500, 0.1, 0.9)
Nr_days_mean = function(m, n, p, q, N)
{
sum=0
for (i in 1:N)
sum = sum + Nr_days(m, n, p, q)
return(sum/N)
}
#pentru valorile 100000, 500, 0.5, 0.1 programul ruleaza foarte mult timp
Nr_days_mean(100, 500, 0.1, 0.9, 1000)
fakes_after_40 = function(m, n, p, q)
{
fake=m
for (i in 2:40) {
new_fake_today=rbinom(1, n, p)
fake = fake + new_fake_today
deactivated_today = rbinom(1, fake, q)
fake = fake - deactivated_today
}
return(fake)
}
fakes_after_40(100, 500, 0.5, 0.1)
