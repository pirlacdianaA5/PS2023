} else if (n > i + length(A_greater)) {
return(z)
} else {
return(element_ith(i - n + length(A_greater), A_greater))
}
}
# Exemplu de utilizare
A <- c(1, 2, 3, 4, 5)
i <- 3
result <- element_ith(i, A)
print(result)
find_M_element <- function(x, k) {
n <- length(x)
threshold <- n %/% 2 + 1
for (i in 1:k) {
random_index <- sample.int(n, 1)
selected_element <- x[random_index]
if (sum(x == selected_element) >= threshold) {
return(selected_element)
}
}
return("x nu are M-element")
}
# Exemplu de utilizare
x <- c(1, 2, 2, 3, 2, 4, 2, 5, 2)
k <- 1000
result <- find_M_element(x, k)
print(result)
k <- ceiling(-log2(10^-7))
print(k)
find_median <- function(S) {
n <- length(S)
a <- 1
m <- floor(a * log(n))
S_prime <- sample(S, m)
sorted_S_prime <- sort(S_prime)
if (m %% 2 == 0) {
median_index <- m / 2
median <- (sorted_S_prime[median_index] + sorted_S_prime[median_index + 1]) / 2
} else {
median_index <- (m + 1) / 2
median <- sorted_S_prime[median_index]
}
return(median)
}
# Exemplu de utilizare
S <- c(1, 2, 3, 4, 5)
median <- find_median(S)
print(median)
find_median <- function(S) {
n <- length(S)
a <- 1
m <- floor(a * log(n))
S_prime <- sample(S, m)
sorted_S_prime <- sort(S_prime)
if (m %% 2 == 0) {
median_index <- m / 2
median <- (sorted_S_prime[median_index] + sorted_S_prime[median_index + 1]) / 2
} else {
median_index <- (m + 1) / 2
median <- sorted_S_prime[median_index]
}
return(median)
}
# Exemplu de utilizare
S <- c(1, 2, 3, 4, 5)
median <- find_median(S)
print(median)
find_median <- function(S) {
n <- length(S)
a <- 1
m <- floor(a * log(n))
S_prime <- sample(S, m)
sorted_S_prime <- sort(S_prime)
if (m %% 2 == 0) {
median_index <- m / 2
median <- (sorted_S_prime[median_index] + sorted_S_prime[median_index + 1]) / 2
} else {
median_index <- (m + 1) / 2
median <- sorted_S_prime[median_index]
}
return(median)
}
# Exemplu de utilizare
S <- c(1, 2, 3, 4, 5)
median <- find_median(S)
print(median)
find_median <- function(S) {
n <- length(S)
a <- 1
m <- floor(a * log(n))
S_prime <- sample(S, m)
sorted_S_prime <- sort(S_prime)
if (m %% 2 == 0) {
median_index <- m / 2
median <- (sorted_S_prime[median_index] + sorted_S_prime[median_index + 1]) / 2
} else {
median_index <- (m + 1) / 2
median <- sorted_S_prime[median_index]
}
return(median)
}
# Exemplu de utilizare
S <- c(1, 2, 3, 4, 5)
median <- find_median(S)
print(median)
n <- ceiling(sqrt(2 * 10^7))
print(n)
n <- ceiling(sqrt(2 * 10^7))
print(n)
n <- ceiling(sqrt(2 * 10^7))
print(n)
#D1
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1)
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1)
return(elem)
}
return("x nu are M-element")
}
#b)
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1)
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1)
return(elem)
}
return("x nu are M-element")
}
#b)
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
k = floor(log(10^-7 , base=0.5)+1)
MC_M_element(sample, k)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1)
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1)
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 3)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1)
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1)
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1)
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1)
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1)
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1)
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#a)
MC_M_element = function(x, k)
{
n = length(x)
for (i in 1:k)
{
elem = sample(x, 1) #selectează un singur element aleator din vectorul x
count = 0;
for (j in 1:n)
if (x[j]==elem)
count = count+1
if (count>=n/2+1) #verificam daca e M-element
return(elem)
}
return("x nu are M-element")
}
sample = c(1, 2, 3, 4, 2, 2, 1, 2, 2, 2, 2)
MC_M_element(sample, 5)
#D2
element_ith = function(i, A) {
z = sample(A, 1)
n = length(A)
A_lt = vector()
k = 1
for (j in 1:n)
if (A[j]<z)
{
A_lt[k] = A[j]
k = k+1
}
A_gt = vector()
k = 1
for (j in 1:n)
if (A[j]>z)
{
A_gt[k] = A[j]
k = k+1
}
if(length(A_lt) > i)
return(element_ith(i, A_lt))
else
if(n > i + length(A_gt))
return(z)
else
return(element_ith(i - n + length(A_gt), A_gt))
}
A = seq(25, 3, -2)
element_ith(2-1, A)
MC_mediana = function(S, a)
{
n = length(S)
m = floor(a*log(n))
S_ = sample(S, m)
return(as.vector(quantile(S_))[2+1])
}
n = floor(sqrt(2/10^-7)+1)
n
sample = c(1, 2, 3, 4, 1, 3, 4, 3, 4)
MC_mediana(sample, 1)
